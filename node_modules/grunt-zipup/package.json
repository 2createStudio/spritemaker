{
  "name": "grunt-zipup",
  "version": "0.1.6",
  "description": "zip file generation (not extraction) from grunt",
  "main": "tasks/grunt-zipup.js",
  "scripts": {
    "test": "grunt test"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/01org/grunt-zipup.git"
  },
  "contributors": [
    {
      "name": "Elliot Smith",
      "email": "elliot.smith@intel.com"
    }
  ],
  "license": "Apache v2",
  "readmeFilename": "README.md",
  "engine": {
    "node": "~0.8.14"
  },
  "peerDependencies": {
    "grunt": "~0.4.1"
  },
  "dependencies": {
    "async": "~0.2.9",
    "mustache": "~0.7.2",
    "moxie-zip": "0.0.2"
  },
  "devDependencies": {
    "grunt": "~0.4.1",
    "grunt-cli": "~0.1.9",
    "grunt-contrib-clean": "~0.4.1",
    "grunt-mochaccino": "~0.1.4",
    "chai": "~1.7.2",
    "glob": "~3.2.1",
    "lodash": "~1.3.1",
    "jshint": "~2.1.4",
    "grunt-contrib-jshint": "~0.6.0",
    "grunt-release": "~0.3.5",
    "adm-zip": "~0.4.3"
  },
  "readme": "# grunt-zipup\n\ngrunt plugin to create a zip file with customisable/automatic package name and suffix.\n\n# License\n\nApache version 2. See the LICENSE file for more details.\n\n# Getting started\n\ngrunt-zipup has been tested on:\n\n*   Fedora 17 Linux (64bit)\n\n*   Windows 7 Enterprise (64bit)\n\nYou need **Grunt ~0.4.1**.\n\nInstall the grunt-zipup plugin in your project with:\n\n    npm install grunt-zipup --save-dev\n\nThen add a line to your <em>Gruntfile.js</em> near the top:\n\n    module.exports = function (grunt) {\n      grunt.loadNpmTasks('grunt-zipup');\n\n      // ... rest of your grunt config ...\n    };\n\nSee the next section for options.\n\n# zipup task\n\nThe zipup task produces an output zip file with a default filename in the format:\n\n    <appName>_<version>_git@<commit ID>_YYYY-MM-DD_HHMMSS_<identifier>.<suffix>\n\nThe git and suffix parts are optional (see below for configuration).\n\nYou can also supply a custom filename template, which will be rendered using the data you supply in the task options. See the section on the <code>template</code> option, below.\n\n## Options\n\n### addGitCommitId\n\ntype: boolean, default: false\n\nIf the project is a git repo, set this to <code>true</code> to include the 7 character variant of the last commit ID as part of the filename.\n\nFor example, an output filename for <code>appName</code> \"myapp\" may look like:\n\n    myapp_git@4f7fe3f_2012-11-01_1151.zip\n\nNB this requires that the <code>git</code> command be in your path.\n\n### appName\n\ntype: string, mandatory\n\nThe name of the application; used as the base filename for the zip file.\n\n### datetime\n\ntype: string, default: current datetime in format 'yyyy-mm-dd_HHMMss'\n\nThe date/time string to fill the <code>datetime</code> placeholder in the output zip file name template.\n\n### files\n\ntype: grunt files object, mandatory\n\nSpecifies which files to include in the output zip file. See [grunt's API docs](http://gruntjs.com/configuring-tasks#files) for details of the supported formats.\n\nSome examples:\n\n*   Add three specific files to the zip file:\n\n        files: [\n          { src: 'src/app.js' },\n          { src: 'src/data-adapter.js' },\n          { src: 'src/ui.js' }\n        ]\n\n    Note that in this case, the destination file name in the zip file will match the source file name, including its parent directory hierarchy.\n\n*   Add all files under the <em>app/src</em> and <em>app/lib</em> directories, retaining the original paths to the matching files:\n\n        file: [\n          { src: 'app/src/**, expand: true },\n          { src: 'app/src/**, expand: true },\n        ]\n\n*   Zip all files inside the <em>app/src</em> and <em>app/lib</em> directories, keeping the same hierarchy in the zip file as is under those directories:\n\n        files: [\n          { cwd: 'app/src', src: '**', expand: true },\n          { cwd: 'app/lib', src: '**', expand: true }\n        ]\n\n    Note how the <code>cwd</code> option is set so that the file paths used in the zip file are relative to those paths.\n\n*   Zip all files inside a directory, specifying a different output directory structure in the zip file:\n\n        files: [\n          { cwd: 'app/src', src: '**', expand: true, dest: 'src' },\n          { cwd: 'app/lib', src: '**', expand: true, dest: 'lib' }\n        ]\n\n    If there is a file <em>app/src/main.js</em> in the project, this is translated to <em>src/main.js</em> in the output zip file.\n\n### outDir\n\ntype: string, default: '.'\n\nOutput directory to put the zipfile into.\n\n### suffix\n\ntype: string, default: 'zip'\n\nThe suffix for the zip file. Don't include the dot.\n\n### template\n\ntype: string, default: see below\n\nThe [Mustache](https://github.com/janl/mustache.js/network) template string to use to generate the output zip file name.\n\nThe default for this is:\n\n    '{{appName}}_{{version}}_' +\n    '{{#gitCommit}}' +\n    'git@{{gitCommit}}_' +\n    '{{/gitCommit}}' +\n    '{{datetime}}{{identifier}}.{{suffix}}'\n\nThe data interpolated into the template string comes from the options for the zipup task (including any default values if the options aren't set). This means that it is possible to add extra data into the filename simply by adding new properties to a task configuration.\n\nFor example, this configuration:\n\n    zipup: {\n      custom_filename: {\n        appName: 'myapp',\n        version: '0.1.0',\n        datetime: grunt.template.today('yyyymmdd'),\n        template: '{{appName}}_{{version}}_{{datetime}}_{{purpose}}.zip',\n\n        // custom data to use in the template\n        purpose: 'QA'\n      }\n    }\n\nproduces filenames like:\n\n    myapp_0.1.0_20130708_QA.zip\n\nSome properties are automatically generated by the zipup task, based on the current runtime environment. You can use these in your own custom templates:\n\n*   <code>gitCommit</code> is generated if <code>addGitCommitId</code> is set to <code>true</code>. It contains the abbreviated git commit ID for the project.\n\n*   <code>identifier</code> is a special option which is set at runtime. See the <em>Tips</em> section for details.\n\n#### Aside: Why Mustache?\n\ngrunt has its own <code>grunt.template</code> functionality, so why am I using Mustache for this?\n\nThe reason is that grunt will pre-process configuration variables which contain lodash template strings. However, because the template for the zipup task is populated at runtime (particularly as the some of the variables are generated on the fly, like <code>gitCommit</code>), some of the template variables are undefined until that point. So the template string needs to be retained as is until the zipup task runs, at which point the correct data is available.\n\nIt may be that there's a way to protect lodash template strings in grunt config, but I haven't been able to find it.\n\n### version\n\ntype: string, mandatory\n\nApplication version.\n\n# Tips\n\n## Using data from package.json\n\nNote that it can be useful to set some of the zipup options from your <em>package.json</em>. For example, your <em>Gruntfile.js</em> might look like this:\n\n    grunt.initConfig({\n      packageInfo: grunt.file.readJSON('package.json'),\n\n      // ... more config ...\n\n      zipup: {\n        wgt: {\n          // set appName and version from package.json\n          appName: '<%= packageInfo.name %>',\n          version: '<%= packageInfo.version %>',\n\n          suffix: 'wgt',\n          addGitCommitId: true,\n          files: [\n            {\n              cwd: 'build/dist',\n              expand: true,\n              src: '**'\n            }\n          ],\n          outDir: 'build'\n        }\n      }\n    });\n\n## Using an identifier\n\nTo customise the output filename at runtime, you can pass an extra parameter to a zipup task when you invoke it. This extra parameter is added into the default template for the output filename, just before the file suffix.\n\nFor example, if a task is configured like this:\n\n    zipup: {\n      package: {\n        appName: 'myapp',\n        version: '0.1.0'\n      }\n    }\n\nand you run that task with:\n\n    grunt zipup:package:FONT-CHANGES\n\nyou will produce a package with a name like:\n\n    app_0.1.0_2013-07-08_162941_FONT-CHANGES.zip\n\nThis can be useful to add on-the-fly explanations to a package name which don't really have a place in the main task configuration.\n\nYou can also provide a place for the identifier in your own custom template:\n\n    zipup: {\n      package: {\n        appName: 'myapp',\n        version: '0.1.0',\n        template: '{{appName}}_{{version}}{{identifier}}.zip'\n      }\n    }\n\nIn situations where you don't supply an identifier, it is set to the empty string '' by default. If you do provide an identifier, it is automatically prefixed with '_', so you don't need to put that in your template.\n\n# Annotated example\n\n    grunt.initConfig({\n      zipup: {\n        wgt: {\n          appName: 'TheMightyApp',\n          suffix: 'wgt',\n          version: '0.1.0',\n          addGitCommitId: true,\n          files: [\n            {\n              cwd: 'build/dist',\n              src: '**',\n              expand: true\n            }\n          ],\n          outDir: 'build'\n        }\n      }\n    });\n\nIn this example, the zip file will be constructed as follows:\n\n*   Files files matching <em>**</em> under the <em>build/dist</em> directory are added to the zip file.\n\n*   Inside the zip file, entries have the \"build/dist\" prefix stripped (as the <code>cwd</code> option is set); this means that the zip file structure will match the structure under the <em>build/dist</em> directory.\n\n*   The output zipfile name also contains the latest git commit ID and has the suffix \"wgt\".\n\n*   The zip file is written to the <em>build/</em> directory. An example of the output filenames produced by this configuration might be:\n\n        build/TheMightyApp_0.1.0_git@41513f9_2013-07-05_133951.wgt\n\n# Contributing\n\nPlease log issues on the [github issue tracker](https://github.com/01org/grunt-zipup/issues) for the project.\n\nNew features or bug fixes are welcome, and should be submitted as a pull request against the <em>master</em> branch of the project.\n\nYou should ensure that you run the <code>grunt jshint</code> task before submitting, to ensure that your code is lint free.\n\nAlso note that any changes you make should be accompanied by tests and documentation, and should not break the existing tests. The tests for the project require grunt-mochaccino to run. Install it and its dependencies the usual way:\n\n    npm install .\n\nYou can run the project tests with:\n\n    grunt test\n",
  "bugs": {
    "url": "https://github.com/01org/grunt-zipup/issues"
  },
  "_id": "grunt-zipup@0.1.6",
  "_from": "grunt-zipup@"
}
