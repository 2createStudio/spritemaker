'use strict';

/**
 * Dependencies
 */
var gm          = require('gm');
var grunt       = require('grunt');
var spritesmith = require('grunt-spritesmith');
var path        = require('path');

/**
 * Module API
 */
module.exports = function(grunt) {

    var SpriteMaker = function() {

        // async - required for grunt-spritesmith
        var done = this.async();

        // settings
        var data         = this.data;
        var src          = data.src;
        var templatesDir = __dirname + '/templates';

        // for grunt-spritesmith
        var destImg    = data.destImg    || 'dist';
        var destCSS    = data.destCSS    || 'dist';
        var imgUrl     = data.imgUrl     || path.relative(destCSS, destImg);
        var algorithm  = data.algorithm  || 'binary-tree';
        var padding    = data.padding    || 2;
        var engine     = data.engine     || 'gm';
        var engineOpts = data.engineOpts || {};
        var imageOpts  = data.imageOpts  || {};
        var cssOpts    = data.cssOpts    || {};

        var assetFormats = data.assetFormats || ['.png', '.jpg', '.jpeg'];
        var hd           = typeof data.hd === 'undefined' ? false : data.hd;
        var hdPrefix     = data.hdPrefix || 'hd';
        var ldPrefix     = data.ldPrefix || 'ld';
        var regPrefix    = data.regPrefix || 'reg';
        var imgType      = 'png';

        // get source files
        var srcFilesTemp = grunt.file.expand(src);
        var srcFiles     = [];

        srcFilesTemp.forEach(function(file) {

            var ext = path.extname(file);

            if (grunt.util._.contains(assetFormats, ext)) {
                srcFiles.push(file);
            }

        });

        // sprite settings
        var hdImageName = 'sprite-' + hdPrefix + '.' + imgType;
        var hdImagePath = destImg + '/' + hdImageName;
        var hdImageUrl  = imgUrl + '/' + hdImageName;
        var hdStyleName = 'sprite-hd.css';
        var hdStylePath = path.join(destCSS, hdStyleName);
        var hdAssetsDir = process.cwd() + '/temp/' + hdPrefix + '-assets'; 

        var ldImageName = 'sprite-' + ldPrefix + '.' + imgType;
        var ldImagePath = destImg + '/' + ldImageName;
        var ldImageUrl  = imgUrl + '/' + ldImageName;
        var ldStyleName = 'sprite-ld.css';
        var ldStylePath = path.join(destCSS, ldStyleName);
        var ldAssetsDir = process.cwd() + '/temp/' + ldPrefix + '-assets'; 

        var regImageName = 'sprite-' + regPrefix + '.' + imgType;
        var regImagePath = destImg + '/' + regImageName;
        var regImageUrl  = imgUrl + '/' + regImageName;
        var regStyleName = 'sprite-reg.css';
        var regStylePath = path.join(destCSS, regStyleName);

        // spritesmith params
        var spritesmithParams = {
            algorithm : algorithm,
            engine    : engine,
            engineOpts: engineOpts,
            imageOpts : imageOpts
        };

        // register grunt-spritesmith
        spritesmith(grunt);

        // run normal spritesmith if no hd sprite
        if (!hd) {
            var regSpriteSmithParams = {
                reg: {
                    src        : srcFiles,
                    destImg    : regImagePath,
                    destCSS    : regStylePath,
                    imgPath    : regImageUrl,
                    padding    : padding,
                    cssOpts    : cssOpts,
                    cssTemplate: require(templatesDir + '/css.template.js')
                }
            };

            grunt.util._.extend(regSpriteSmithParams.reg, spritesmithParams);

            var regConfig = grunt.util._.extend(grunt.config.get(), { sprite: regSpriteSmithParams });

            grunt.config.init(regConfig);
            grunt.task.run('sprite:reg');
            grunt.log.ok('Regular sprite created.');
            done(true);
            return;
        }

        // create HD sprite
        grunt.log.writeln('Creating temp ' + hdPrefix + ' assets.');
        grunt.util._.forEach(srcFiles, function(file) { 

            var newName = hdPrefix + '-' + path.basename(file);
            grunt.file.copy(file, path.join(hdAssetsDir, newName));

        });

        // resize HD sprite assets
        grunt.log.writeln('Create temp ' + ldPrefix + ' assets.');

        if (!grunt.file.exists(ldAssetsDir)) {
            grunt.file.mkdir(ldAssetsDir);
        } else {
            grunt.log.error('LD directory is existing!');
        }

        var resizedImages = [];
        var i             = 0;
        var counter       = function(err) {

            if (err) {
                grunt.log(err);
                return;
            }

            i++;

            if (i === srcFiles.length) {
                grunt.log.ok('LD assets done.');
                makeSpritesmithGo();
            }

        }

        srcFiles.forEach(function(file) {

            var ext = path.extname(file);

            if (grunt.util._.contains(assetFormats, ext)) {
                var filename     = path.basename(file);
                var pathToTarget = path.join(ldAssetsDir, filename);
            }

            resizedImages.push(pathToTarget);
            gm(file)
                .resize(50, 50, '%')
                .write(pathToTarget, counter);

        });

        // prepare settings for hd & ld
        var makeSpritesmithGo = function() {

            var hdSpritesmithParams = {
                hd: {
                    src    : [hdAssetsDir + '/*'],
                    destImg: hdImagePath,
                    destCSS: hdStylePath,
                    imgPath: hdImageUrl,
                    padding: padding * 2,
                    cssOpts: cssOpts
                }
            };

            grunt.util._.extend(hdSpritesmithParams.hd, spritesmithParams);

            var ldSpritesmithParams = { 
                ld: {
                    src    : [ldAssetsDir + '/*'],
                    destImg: ldImagePath,
                    destCSS: ldStylePath,
                    imgPath: ldImageUrl,
                    padding: padding,
                    cssOpts: cssOpts,
                    cssTemplate: require(templatesDir + '/css.template.js')
                }
            };

            ldSpritesmithParams.ld.cssOpts = grunt.util._.extend(cssOpts, {
                hdPath  : hdStyleName,
                hdPrefix: hdPrefix,
                ext     : imgType
            });

            grunt.util._.extend(ldSpritesmithParams.ld, spritesmithParams);

            var allParams = grunt.util._.extend(hdSpritesmithParams, ldSpritesmithParams);
            var config    = grunt.util._.extend(grunt.config.get(), { sprite: allParams });

            grunt.config.init(config);

            // run grunt tasks
            grunt.task.run('sprite:hd');
            grunt.task.run('sprite:ld');

            done(true);

        }

    }

    // register grunt task
    grunt.registerMultiTask('spriteMaker', 'Easy CSS sprites with grunt', SpriteMaker);

}